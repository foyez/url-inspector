// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: broken_links.sql

package db

import (
	"context"
	"database/sql"
)

const createBrokenLink = `-- name: CreateBrokenLink :execresult
INSERT INTO broken_links (url_id, link, status_code)
VALUES ($1, $2, $3)
`

func (q *Queries) CreateBrokenLink(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, createBrokenLink)
}

const deleteBrokenLinksByURL = `-- name: DeleteBrokenLinksByURL :exec
DELETE FROM broken_links
WHERE url_id = $1
`

func (q *Queries) DeleteBrokenLinksByURL(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteBrokenLinksByURL)
	return err
}

const getBrokenLinksByURL = `-- name: GetBrokenLinksByURL :many
SELECT id, url_id, link, status_code FROM broken_links
WHERE url_id = $1
ORDER BY id
`

func (q *Queries) GetBrokenLinksByURL(ctx context.Context) ([]BrokenLink, error) {
	rows, err := q.db.QueryContext(ctx, getBrokenLinksByURL)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokenLink
	for rows.Next() {
		var i BrokenLink
		if err := rows.Scan(
			&i.ID,
			&i.UrlID,
			&i.Link,
			&i.StatusCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
