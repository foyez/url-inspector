// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: urls.sql

package db

import (
	"context"
	"database/sql"
	"strings"

	"github.com/foyez/url-inspector/backend/internal/models"
)

const createURL = `-- name: CreateURL :execresult
INSERT INTO urls (
  url,
  title,
  html_version,
  internal_links,
  external_links,
  broken_links,
  has_login_form,
  status
)
VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateURLParams struct {
	Url           string             `json:"url"`
	Title         string             `json:"title"`
	HtmlVersion   string             `json:"html_version"`
	InternalLinks int32              `json:"internal_links"`
	ExternalLinks int32              `json:"external_links"`
	BrokenLinks   int32              `json:"broken_links"`
	HasLoginForm  bool               `json:"has_login_form"`
	Status        models.CrawlStatus `json:"status"`
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createURL,
		arg.Url,
		arg.Title,
		arg.HtmlVersion,
		arg.InternalLinks,
		arg.ExternalLinks,
		arg.BrokenLinks,
		arg.HasLoginForm,
		arg.Status,
	)
}

const deleteURLs = `-- name: DeleteURLs :exec
DELETE FROM urls
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) DeleteURLs(ctx context.Context, ids []int64) error {
	query := deleteURLs
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const getURLByID = `-- name: GetURLByID :one
SELECT id, url, title, html_version, internal_links, external_links, broken_links, has_login_form, status, created_at, updated_at FROM urls
WHERE id = ? LIMIT 1
`

func (q *Queries) GetURLByID(ctx context.Context, id int64) (Url, error) {
	row := q.db.QueryRowContext(ctx, getURLByID, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Title,
		&i.HtmlVersion,
		&i.InternalLinks,
		&i.ExternalLinks,
		&i.BrokenLinks,
		&i.HasLoginForm,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const resetURL = `-- name: ResetURL :exec
UPDATE urls
SET
  title = '',
  html_version = 'Unknown',
  has_login_form = false,
  internal_links = 0,
  external_links = 0,
  broken_links = 0,
  status = 'queued'
WHERE id = ?
`

func (q *Queries) ResetURL(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, resetURL, id)
	return err
}

const updateCrawlResult = `-- name: UpdateCrawlResult :exec
UPDATE urls
SET
  title = ?,
  html_version = ?,
  internal_links = ?,
  external_links = ?,
  broken_links = ?,
  has_login_form = ?,
  status = ?
WHERE id = ?
`

type UpdateCrawlResultParams struct {
	Title         string             `json:"title"`
	HtmlVersion   string             `json:"html_version"`
	InternalLinks int32              `json:"internal_links"`
	ExternalLinks int32              `json:"external_links"`
	BrokenLinks   int32              `json:"broken_links"`
	HasLoginForm  bool               `json:"has_login_form"`
	Status        models.CrawlStatus `json:"status"`
	ID            int64              `json:"id"`
}

func (q *Queries) UpdateCrawlResult(ctx context.Context, arg UpdateCrawlResultParams) error {
	_, err := q.db.ExecContext(ctx, updateCrawlResult,
		arg.Title,
		arg.HtmlVersion,
		arg.InternalLinks,
		arg.ExternalLinks,
		arg.BrokenLinks,
		arg.HasLoginForm,
		arg.Status,
		arg.ID,
	)
	return err
}

const updateStatus = `-- name: UpdateStatus :exec
UPDATE urls SET status = ?
WHERE id = ?
`

type UpdateStatusParams struct {
	Status models.CrawlStatus `json:"status"`
	ID     int64              `json:"id"`
}

func (q *Queries) UpdateStatus(ctx context.Context, arg UpdateStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateStatus, arg.Status, arg.ID)
	return err
}
