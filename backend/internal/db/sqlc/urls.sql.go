// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: urls.sql

package db

import (
	"context"
	"database/sql"
)

const createURL = `-- name: CreateURL :execresult
INSERT INTO urls (
  url,
  title,
  html_version,
  internal_links,
  external_links,
  broken_links,
  has_login_form,
  status
)
VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
`

func (q *Queries) CreateURL(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, createURL)
}

const listURLs = `-- name: ListURLs :many
SELECT id, url, title, html_version, internal_links, external_links, broken_links, has_login_form, status, created_at, updated_at FROM urls ORDER BY created_at DESC
`

func (q *Queries) ListURLs(ctx context.Context) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, listURLs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Title,
			&i.HtmlVersion,
			&i.InternalLinks,
			&i.ExternalLinks,
			&i.BrokenLinks,
			&i.HasLoginForm,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
